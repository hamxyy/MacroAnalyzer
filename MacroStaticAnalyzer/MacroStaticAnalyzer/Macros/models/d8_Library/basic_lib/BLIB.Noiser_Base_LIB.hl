/*----------------------------------------------------------------------------------------------------------------
//                                 BASIC FUNCTION LIBRARY  Noiser
// Initial Version                                         :  2011-03-17   Meike Doose
// Add functions for Tinnitus preset (Pink, White, Speech, HighTone) functions   		:  2011-11-02 Ma Mie Mie Thein
// Change println for d8PTinGain[0] under NoiserRB_Set_Entry(int remapped_pos)			:  2011-11-18 Ma Mie Mie Thein
// Shorten Offset curves name 															:  2012-01-30 Ma Mie Mie Thein
// Added NoiserEn_Set_Entry and NoiserEn_Get_Entry for Noiser checkbox					:  2012-03-22 Ma Mie Mie Thein 
// Modified NoiserPreset functions														:  2012-05-14 Nadia Neugeborn
// Peer review comments implemented														:  2012-06-19 MieMie/Cecil/Nadia
// FR60546: Added NoiserDefault_Offset function to reduce firstfit & program selection default whitenoise level: 2013-05-16 Mie Mie 
// *********************************************CODE FREEZE*******************************************************
// Added assertion for error messages													:  2012-12-14 Ma Mie Mie Thein
// Sifit 7.2 Peer Review																: 2013-08-01 Alastair, Raymond
// ------------------------------------------------------------- SIFIT7.3 -----------------------------------------
// Added NoiserRB_Get_EntryOpposite ()                                                  : 2014-01-10 Alastair             
// Update for Sifit7.3: added the checkbox.								: 2014-01-16 Jenny
// Minor updates to annotation                                          : 2014-02-14 Al
// Sifit7.3 Peer review																: 2014-04-14 Jenny, Sonia
/*---------------------------------------------------------------------------------------------------------------*/
// ------------------------------------------------------------- SIFIT7.4 -----------------------------------------
// Update for 7.4: added new mixed with mic checkbox                                      : 2014-05-28 Meike Steinbuss         
// first draft of modulated noise included													: 2014-06-04 Meike Steinbuss    
// include OceanEn in macros other then Ocean itself in order to be turned off again 		: 2014-06-16 Meike Steinbuss
// include update on pure noiser mode due to beeps that cannot be heard while tin_mode is set to pure : 2014-06-30 Meike Steinbuss
// deleting of Noiser RB																	: 2014-06-30 Meike Steinbuss
// adjustments on Tinnitus Sw Macro variable												: 2014-07.03 Meike Steinbuss
// change preliminary Tinnitus SW macro variable from 25 to 9 HP							: 2014-07-14 Meike Steinbuss
// include binaural dependencies for Ocean Noise (d9FTinOceanSync) and correct Ocean RB getter to correct phl values							: 2014-07-14 Meike Steinbuss
// minor comment adjustments																:2014-07-16 Meike Steinbuss
// rearrange noiser mode and include p_tin_mode = pure again after rejection of CR in Progam CCB								: 2014-07-17 Meike Steinbuss
// d9SwTinnitusNoisePreset included in default function but uncommented until writeable in macros				: 2014-07-22 Meike Steinbuss
// Include NoiserPreset_ModulatedNoiseOff function											: 2014-07-28 Meike 
// Include Modulated Noise shaping curves for different ACPs								: 2014-09-02 Meike
/*---------------------------------------------------------------------------------------------------------------*/

/*-----------------------------------------------------------7.4--------------------------------------------------*/
// Renamed Noiser_OppositeIsOnAndPure to  Noiser_IsOnAndPureOpposite        				 	: 2014-08-07 Sultan
// Uncomment d9SwTinnitusNoisePreset in NoiserDefault_Offset()								 	: 2014-08-20 Mie Mie
// ER69023: IsStaticNoiseSetInCurrentSide, IsStaticNoiseSetInOppSide, IsModuelateNoiseSetInCurrentSide,
// IsModuelateNoiseSetInOppSide function added												 	: 2014-10-10 Mie Mie
// FR69642:Added NoiserPreset_PinkNoiseWithout18dBoffset() function and 
// changed from NoiserPreset_PinkNoise() to NoiserPreset_PinkNoiseWithout18dBoffset() 
// in NoiserPresetModulatedNoiseRB_Set_Entry() and removed redundant comments and edited format	: 2014-10-31 Mie Mie										
/*---------------------------------------------------------------------------------------------------------------*/

namespace shs_sat
{
	using shs_sat.*;
	package Lib BasicLibrary_Noiser
	{

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    Noiser_IsOnAndPure
		//   Input      :  None
		//   Output      :  <bool> true when Noiser ON & PURE, else false 
		//   Description:  Compares the HI settings and returns the noiser state. 
		-----------------------------------------------------------------------------------------------------------------*/
		public function bool Noiser_IsOnAndPure ()
		{ 
			if (hi:d8PTinEn == d8PTinEn.on &&
				hi:d8PTinMode == d8PTinMode.pure) 
			{
				println ('[HAL]BLIB-Noiser_IsOnAndPure  >> TRUE');
				return true;
			}
			else 
			{
				println ('[HAL]BLIB-Noiser_IsOnAndPure  >> FALSE');
				return false;
			}
		} 

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    Noiser_OppositeIsOnAndPure
		//   Input      :  None
		//   Ouput      :  <bool> 
		//   Description:  Performs exact same function as Noiser_IsOnAndPure (see above), but queries the opposite side instead.    
		-----------------------------------------------------------------------------------------------------------------*/
		public function bool Noiser_IsOnAndPureOpposite ()	
		{ 
			if (opp(hi:d8PTinEn) == d8PTinEn.on &&
				opp(hi:d8PTinMode)  == d8PTinMode.pure) 
			{
				println ('[HAL]BLIB-Noiser_OppositeIsOnAndPure  >> TRUE');
				return true;
			}
			else{
				println ('[HAL]BLIB-Noiser_OppositeIsOnAndPure  >> FALSE');
				return false;
			}
		} 		

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserEn_Get_Entry
		//   Input      :  None
		//   Output      :  <int> Actual position of Noiser checkbox.
		//   Description:  Compares the HI settings and returns the Slider positions wrt 70x PP    
		-----------------------------------------------------------------------------------------------------------------*/
		public function int NoiserEn_Get_Entry () //SIFIT7.3PEERREVIEWED
		{ 
			if (hi:d8PTinEn == d8PTinEn.on)
			{
				println ("[HAL]:BLIB.NoiserEn_Get_Entry = ON (pos=1)");
				return 1;
			}
			else
			{
				println ("[HAL]:BLIB.NoiserEn_Get_Entry = OFF (pos=0)");
				return 0;
			}
		} 		

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserEn_Set_Entry
		//   Input      :  <int> Desired checkbox based on CxxPos 
		//   Output      :  <void>  
		//   Description:  set d8PTinEn based on CxxPos    
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserEn_Set_Entry (int CxxPos) 
		{	
			println("[HAL]:BLIB.NoiserEn_Set_Entry CxxPos=" + CxxPos);			
			if (CxxPos == 1)
			{
				hi:d8PTinEn = d8PTinEn.on;
			}
			else
			{
				hi:d8PTinEn = d8PTinEn.off;
			}
		} 	

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    Noiser_MixMicrophoneEn_Get_Entry
		//   Input      :  None
		//   Output      :  <int> Actual position of Noiser_MixMicrophone checkbox.
		//   Description:  Compares the HI settings and returns the checkbox positions   
		-----------------------------------------------------------------------------------------------------------------*/
		public function int Noiser_MixMicrophoneEn_Get_Entry () 
		{ 
			
			if ( hi:d8PTinMode == d8PTinMode.mixed) // if tinnitus mixed 
			{
				println ("[HAL]:BLIB.Noiser_MixMicrophoneEn_Get_Entry = ON (pos=1)");
				return 1;
			}
			else
			{
				println ("[HAL]:BLIB.Noiser_MixMicrophoneEn_Get_Entry = OFF (pos=0)");
				return 0;
			}
		}		

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    Noiser_MixMicrophoneEn_Set_Entry
		//   Input      :  <int> Desired checkbox based on CxxPos 
		//   Output      :  <void>  
		//   Description:  mute of microphone path    
		-----------------------------------------------------------------------------------------------------------------*/
		public function void Noiser_MixMicrophoneEn_Set_Entry (int CxxPos)
		{	
			println("[HAL]:BLIB.Noiser_MixMicrophoneEn_Set_Entry CxxPos=" + CxxPos);			
			if (CxxPos == 1)
			{
				// Tinnitus mode: Mixed with Mic Noise
				hi:d8PTinMode = d8PTinMode.mixed;
				println ('[HAL]BLIB-NoiserRB_Set_Entry >> MIXED >> pos=' + CxxPos);
			}
			else
			{
				// Tinnitus mode: Pure Noise
				hi:d8PTinMode = d8PTinMode.pure;
				println ('[HAL]BLIB-NoiserRB_Set_Entry >> PURE >> pos=' + CxxPos);
			}
		} 	
		
		/*----------------------------------------------------------------------------------------------------------------
		//   Description:  Set Pink Noise to default level which is not maximum level
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserPreset_PinkNoise () 
		{
			// Apply Pink Noise offset
			// Maximum slider position is equal to Pink noise.
			applyOffset ("VeryHighOffsetCrv", ToSubject.SwTinnitus, Apply.Complete);

			// Bring down all the slider by 18dB to get the default position (pink noise) 
			applyOffset ("MtendBOffsetCrv", ToSubject.SwTinnitus, Apply.Complete);
			println ('[HAL]BLIB - NoiserPreset_PinkNoise apply offset executed');
		}

		/*----------------------------------------------------------------------------------------------------------------
		//   Description:  Set Maximum Pink Noise level by applying very high offset 
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserPreset_PinkNoiseWithout18dBoffset () 
		{
			// Apply maximum Pink Noise level  
			// Maximum slider position is equal to Pink noise.
			applyOffset ("VeryHighOffsetCrv", ToSubject.SwTinnitus, Apply.Complete);
		}
		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserPreset_WhiteNoise
		//   Input      :  None
		//   Output      :  Set Tinnitus White Noise preset 
		//   Description:  In order to apply correct offsets (1) apply pink noise offset, (2) apply desired offset on top  
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserPreset_WhiteNoise ()
		{ 

		// Apply Pink Noise offset
			NoiserPreset_PinkNoise ();

			// Apply White Noise offset
			applyOffset ("WNPresetWrtPNCrv", ToSubject.SwTinnitus, Apply.Complete);
			println ('[HAL]BLIB - NoiserPreset_WhiteNoise apply offset executed');
		}

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserPreset_SpeechNoise
		//   Input      :  None
		//   Output      :  Set Tinnitus Speech Noise preset 
		//   Description:  In order to apply correct offsets (1) apply pink noise offset, (2) apply desired offset on top 
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserPreset_SpeechNoise () 
		{
			// Apply Pink Noise offset
			NoiserPreset_PinkNoise ();

			// Apply Speech Noise offset
			applyOffset ("SNpresetWrtPNCrv", ToSubject.SwTinnitus, Apply.Complete);
			println ('[HAL]BLIB - NoiserPreset_SpeechNoise apply offset executed');
		}

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserPreset_HighToneNoise
		//   Input      :  None
		//   Output      :  Set Tinnitus High Tone Noise preset 
		//   Description:  In order to apply correct offsets (1) apply pink noise offset, (2) apply desired offset on top 
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserPreset_HighToneNoise () 
		{ 
			// Apply Pink Noise offset
			NoiserPreset_PinkNoise ();

			// Apply High Tone Noise offset
			applyOffset ("HTPresetWrtPNCrv", ToSubject.SwTinnitus, Apply.Complete);
			println ('[HAL]BLIB - NoiserPreset_HighToneNoise apply offset executed');
		}

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserPreset_BrownianNoise
		//   Input      :  None
		//   Output      :  Set Tinnitus Brownian Noise preset 
		//   Description:  In order to apply correct offsets (1) apply pink noise offset, (2) apply desired offset on top 
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserPreset_BrownianNoise () 
		{
			// Apply Pink Noise offset
			NoiserPreset_PinkNoise ();

			// Apply Brownian Noise offset
			applyOffset ("BNpresetWrtPNCrv", ToSubject.SwTinnitus, Apply.Complete);
			println ('[HAL]BLIB - NoiserPreset_BrownianNoise apply offset executed');
		}	

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserPresetModulatedNoiseRB_Set_Entry
		//   Input      :  <int> Desired Radio Button entry 
		//   Output      :  <void> 
		//   Description:  Sets the hearing instrument controls based on the requested position    
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserPresetModulatedNoiseRB_Set_Entry (int pos) 
		{ 
			if(pos==0)
			{
				// Modulated Noise: Ocean 1
				hi:d9PhlTinOceanSetting = d9PhlTinOceanSetting.Set_1;   
				println ('[HAL]BLIB-NoiserPresetModulatedNoiseRB_Set_Entry >> Ocean1 >> pos=' + pos);
			}
			else if (pos==1)
			{
				// Modulated Noise: Ocean 2
				hi:d9PhlTinOceanSetting = d9PhlTinOceanSetting.Set_2;  
				println ('[HAL]BLIB-NoiserPresetModulatedNoiseRB_Set_Entry >> Ocean2 >> pos=' + pos);
			}
			else if (pos==2)
			{
				// Modulated Noise: Ocean 3
				hi:d9PhlTinOceanSetting = d9PhlTinOceanSetting.Set_3;  
				println ('[HAL]BLIB-NoiserPresetModulatedNoiseRB_Set_Entry >> Ocean3 >> pos=' + pos);
			}
			else if (pos==3)
			{
				// Modulated Noise: Ocean 4
				hi:d9PhlTinOceanSetting = d9PhlTinOceanSetting.Set_4;  
				println ('[HAL]BLIB-NoiserPresetModulatedNoiseRB_Set_Entry >> Ocean4 >> pos=' + pos);
			}
			else
			{
				println('ERROR: Radiobutton position out of SPEC/Range');
			}
				
			// Apply Pink Noise offset without lowering 18dB
			NoiserPreset_PinkNoiseWithout18dBoffset ();


			if(BasicLibrary_Curves.VentOutisOpen())
			{
				if(BasicLibrary_Curves.VentOutisOpenOpen())
				{
					// Apply Ocean shaping offset openopen
					applyOffset ("tinnitus_noise_open", ToSubject.SwTinnitus, Apply.Complete);
					println ('[HAL]BLIB - Ocean apply offset for open executed');
				}
				else
				{
					// Apply Ocean shaping offset openclosed 
					applyOffset ("tinnitus_noise_semiopen", ToSubject.SwTinnitus, Apply.Complete);
					println ('[HAL]BLIB - Ocean apply offset for semi-open executed');				
				}			
			}
			else 
			{			
				// Apply Ocean shaping offset closed
				applyOffset ("tinnitus_noise_closed", ToSubject.SwTinnitus, Apply.Complete);
				println ('[HAL]BLIB - Ocean apply offset for closed executed');
			}

		}

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserPresetModulatedNoiseRB_Get_Entry
		//   Input      :  None
		//   Output      :  <int> Actual Radio Button position 
		//   Description:  Compares the HI settings and returns the Radio Button positions 
		-----------------------------------------------------------------------------------------------------------------*/
		public function int NoiserPresetModulatedNoiseRB_Get_Entry () 
		{
			if (hi:d9PhlTinOceanSetting == d9PhlTinOceanSetting.Set_1){
				println ('[HAL]BLIB-NoiserPresetModulatedNoiseRB_Get_Entry  >> Ocean1 (pos=0)');
				return 0;
			}
			else if (hi:d9PhlTinOceanSetting == d9PhlTinOceanSetting.Set_2){
				println ('[HAL]BLIB-NoiserPresetModulatedNoiseRB_Get_Entry  >> Ocean2 (pos=1)');
				return 1;
			}
			else if (hi:d9PhlTinOceanSetting == d9PhlTinOceanSetting.Set_3){
				println ('[HAL]BLIB-NoiserPresetModulatedNoiseRB_Get_Entry  >> Ocean3 (pos=1)');
				return 2;
			}
			else if (hi:d9PhlTinOceanSetting == d9PhlTinOceanSetting.Set_4){
				println ('[HAL]BLIB-NoiserPresetModulatedNoiseRB_Get_Entry  >> Ocean4 (pos=1)');
				return 3;
			}
			else{
				println('ERROR: Radiobutton position out of SPEC/Range');
				return -1;
			}
		}
		
		
		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserPreset_ModulatedNoise
		//   Input      :  None
		//   Output      :  Enable Tinnitus Modulated Noise bit 
		//   Description:  
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserPreset_ModulatedNoise () 
		{
			// Enable Modulated Noise
			hi:d9FTinOceanEn = d9FTinOceanEn.on_d_modulated_noise;	
			println ('[HAL]BLIB - NoiserPreset_ModulatedNoise enabled');
			
			// for a binaural fitting the ocean noises on both sides have to be synchronized, not though for a monaural fitting
			if (env:DetHi == DetHi.BothSides){
				hi:d9FTinOceanSync = d9FTinOceanSync.binaural; 
				println ('[HAL]BLIB - NoiserPreset_ModulatedNoise for binaural fitting');
			}
			else{
				hi:d9FTinOceanSync = d9FTinOceanSync.monaural;
				println ('[HAL]BLIB - NoiserPreset_ModulatedNoise for monaural fitting');
			}
		}
		
		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserPreset_ModulatedNoiseOff
		//   Input      :  None
		//   Output      :  Disable Tinnitus Modulated Noise bit 
		//   Description:  
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserPreset_ModulatedNoiseOff () 
		{
			// Disable Modulated Noise
			hi:d9FTinOceanEn = d9FTinOceanEn.off_d_constant_noise;
			println ('[HAL]BLIB - NoiserPreset_ModulatedNoise disabled');
			
		}		

		/*----------------------------------------------------------------------------------------------------------------
		//   Basic LIBRARY Function:    NoiserDefault_Offset
		//   Input      :  None
		//   Output      :  None
		//   Description: Add additional offset to Tinnitus default level  FR60546
		-----------------------------------------------------------------------------------------------------------------*/
		public function void NoiserDefault_Offset () //SIFIT7.3PEERREVIEWED
		{

			// Apply additional -6dB offset to White Noise preset for the first fit default only
			applyOffset ("OffsetToTinDef", ToSubject.SwTinnitus, Apply.Complete);
			println ('[HAL]BLIB - NoiserDefault_Offset apply offset executed');
			// this SW control needs to be set for showing the correct preset in the combo box since the macro getter for all presets always returns 0.  
			hi:d9SwTinnitusNoisePreset = d9SwTinnitusNoisePreset.Static_White;  			
		}
		
		/*$----------------------------------------------------------------------------------------------------------------
				Description: Returns true when static noise is set in Current HI.
		-----------------------------------------------------------------------------------------------------------------$*/
		public function bool IsStaticNoiseSetInCurrentSide () 
		{
			println('[HAL]BlibNoiser.IsStaticNoiseSetInCurrentSide');

			if(hi:d9FTinOceanEn == d9FTinOceanEn.off_d_constant_noise)
			{
				return true;
			}				
			else
			{
				return false;
			}
		}
		
		/*$----------------------------------------------------------------------------------------------------------------
				Description: Returns true when modulate noise is set in Current HI.
		-----------------------------------------------------------------------------------------------------------------$*/
		public function bool IsModuelateNoiseSetInCurrentSide () 
		{
			println('[HAL]BlibNoiser.IsModuelateNoiseSetInCurrentSide');

			if(hi:d9FTinOceanEn == d9FTinOceanEn.on_d_modulated_noise)
			{
				return true;
			}				
			else
			{
				return false;
			}
		}
		/*$----------------------------------------------------------------------------------------------------------------
				Description: Returns true when static noise is set in Opposite HI.
		-----------------------------------------------------------------------------------------------------------------$*/
		public function bool IsStaticNoiseSetInOppSide () 
		{
			println('[HAL]BlibNoiser.IsStaticNoiseSetInOppSide');

			if(opp(hi:d9FTinOceanEn) == d9FTinOceanEn.off_d_constant_noise)
			{
				return true;
			}				
			else
			{
				return false;
			}
		}

		/*$----------------------------------------------------------------------------------------------------------------
				Description: Returns true when modulate noise is set in Opposite HI.
		-----------------------------------------------------------------------------------------------------------------$*/
		public function bool IsModuelateNoiseSetInOppSide () 
		{
			println('[HAL]BlibNoiser.IsModuelateNoiseSetInOppSide');

			if(opp(hi:d9FTinOceanEn) == d9FTinOceanEn.on_d_modulated_noise)
			{
				return true;
			}				
			else
			{
				return false;
			}
		}		
		/*----------------------------------------------------------------------------------------------------------------
		// 								  END Of BASIC FUNCTION  LIBRARY     
		-----------------------------------------------------------------------------------------------------------------*/
	} //package BasicLibrary_Noiser

} //namespace shs.sat

