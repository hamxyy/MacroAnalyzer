/*---------------------------------------------------------------------------------------------------------------
// CXX UI:                          Direct Audio Input(DAI) Mix with Microphone Checkbox
// Initial Version		         									 :  2011-03-14  Cecil Wilson
// Add println for easy debugging									 :  2011-06-27  Chuah LayYuan
// Disable Toggle and SpeechActivatedFM when MixMic is disable       :  2011-07-13  Chuah LayYuan
// Added Tinnitus greyout										  	 :  2011-07-19  Cecil Wilson
// Add println for MPV testing										 :  2011-09-22  Jenny Lin
// Add tick with greyOut handling for toggle and SpeechActivateFM    :  2011-09-27  Chuah LayYuan
// Modified handling for tick with greyOut							 :  2011-11-08  Chuah LayYuan
// Macro code Cleanup												 :  2012-02-14  Cecil Wilson
// Deleted comments above application functions that descibe what the functions do  :  Alastair Manders 2012-06-5
// Removed the resetting of the retVal to be 0 when function returns -1 in GetPos : 2012-06-13 Jenny Lin 
// Calling HLIB for the IsEnabled test 								:  2012-06-14 Jenny Lin
// ******SIFIT7.2_PEERREVIEWED: 					  :  2013-07-30   Jenny, Judith
// updated IsVisible() to call the Is_DAI_Input_Mode()	: 2013-11-04 Jenny
// refractor: Optimize code									: 2013-12-02 Jenny
// updated println statement for debugging.											: 2014-01-15 Jenny
// Sifit7.3 Peer review																: 2014-04-15 Jenny, Judith
// ****** SIFIT7.4 ******
// Updated SetPos to PrintEnvSettings to test SideSelection macro.  				:  2014-08-25   Jenny
// Code cleanup: Updated printlines.												: 2014-10-09 Jenny
/*---------------------------------------------------------------------------------------------------------------$$*/
namespace shs_sat
{
	using shs_sat.*;
	package MixedMode DAI_MixMicrophoneEn
	{
		application function bool IsVisible ()
		{
			println ('[HAL]MixedMode.DAI_MixMicrophoneEn.IsVisible'+ BasicLibrary_DebugPrint.PrintEnvSettings());

			bool retVal = BasicLibrary_InputMode.Is_DAI_Input_Mode ();
			return retVal;
		}
		
		application function bool IsEnabled ()
		{
			println ('[HAL]MixedMode.DAI_MixMicrophoneEn.IsEnabled');

			bool retVal = (BasicLibrary_Noiser.Noiser_IsOnAndPure () == false); 
			return retVal;
		}
		
		application function int MaxPos ()
		{
			println ('[HAL]MixedMode.DAI_MixMicrophoneEn.MaxPos');

			int retVal = 1;
			return retVal;
		}
		
		application function int GetPos ()
		{
			println ('[HAL]MixedMode.DAI_MixMicrophoneEn.GetPos');

			int retVal = BasicLibrary_MicrophoneMix.DAI_MixMicrophoneEn_Get_Mode (); 
			return retVal;
		}
		
		application function void SetPos (int pos)
		{
			println ('[HAL]MixedMode.DAI_MixMicrophoneEn.SetPos'+ BasicLibrary_DebugPrint.PrintEnvSettings());
			
			High_Level_Library_MicrophoneMix.DAI_MixMicrophoneEn_Set_Mode (pos);
		}
	}
}